module acl-service {

  namespace "http://example.com/acl-service";
  prefix acl-service;

  import ietf-inet-types {
    prefix inet;
  }
  import tailf-common {
    prefix tailf;
  }
  import tailf-ncs {
    prefix ncs;
  }

  description
    "A simple access list module";

  revision 2022-06-03 {
    description
      "Initial revision.";
  }

  list access-list {
    description "A basic access-list definition";

    key name;
    leaf name {
      tailf:info "Unique name for this access-list";
      tailf:cli-allow-range;
      type string {
        pattern '[\S]*';
      } 
    }

    uses ncs:service-data;
    ncs:servicepoint acl-service-servicepoint;

    leaf-list device {
      tailf:info "The devices where this ACL will be created";
      type leafref {
        path "/ncs:devices/ncs:device/ncs:name";
      }
    }

    container default {
      tailf:info "Default behaviors for the ACL";
      leaf rule { 
        tailf:info "Whether the ACL will end with a default DENY or PERMIT";
        type enumeration {
          enum deny;
          enum permit; 
        }
        default deny;
      }
    }

    list rule {
      tailf:info "The list of rules in this access-list";
      ordered-by user;
      key name; 

      leaf name {
        tailf:info "The name for this rule.";
        type string {
          pattern '[\S]*';
        } 
      }

      leaf description {
        tailf:info "The purpose for this rule in the access-list";
        type string; 
      }

      leaf action {
        mandatory true;
        tailf:info "Whether this rule is to deny or permit traffic";
        type enumeration {
          enum deny; 
          enum permit;
        }
      }

      leaf protocol { 
        mandatory true;
        tailf:info "tcp/udp";
        type enumeration {
          enum tcp; 
          enum udp; 
        }
      }

      container source {
        tailf:info "The source details for this rule";

        leaf address {
          mandatory true;
          tailf:info "The source address for this rule";
          type union {
            type inet:ipv4-address;
            type inet:ipv4-prefix;
          }
        }

        leaf port {
          tailf:info "The source port (if different from destination) for this rule";
          type uint16{
            range 0..65535;
          }
        }
      }

      container destination {
        tailf:info "The destination details for this rule";

        leaf address {
          mandatory true;
          tailf:info "The destination address for this rule";
          type union {
            type inet:ipv4-address;
            type inet:ipv4-prefix;
          }
        }

        leaf port {
          mandatory true;
          tailf:info "The destination port for this rule";
          type uint16{
            range 1..1024;
          }
        }
      }

      leaf log {
        tailf:info "Whether to log hits to this rule";
        type empty;
      }

    }
  }
}
